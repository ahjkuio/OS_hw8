Работа по заданию:
(1)
1) Добавим флаги в riscv.h 
2) В kernel/vm.c добавим функцию vmprint, которая будет рекурсивно обходить таблицу страниц и выводить информацию.
3) В kernel/defs.h добавим прототип функции
4) В kernel/sysproc.c добавим функцию sys_vmprint
5) В kernel/syscall.c добавим прототип функции и свяжем номер системного вызова с функцией
6) В kernel/syscall.h добавим новый номер системного вызова
7) Объявим вызов в user/user.h и user/usys.pl
8) Создадим user/vmprint.c для вызова "системной" функции
(2)
9) В kernel/sysproc.c добавим функцию sys_pgaccess - для проверки и сброса флага доступа
10) В kernel/defs.h добавим прототип функции
11) В kernel/syscall.c добавим прототип функции и свяжем номер системного вызова с функцией
12) В kernel/syscall.h добавим новый номер системного вызова
13) Объявим вызов в user/user.h и user/usys.pl
14) В kernel/vm.c в функцию walk добавим сброс флага доступа (PTE_A) при создании новой записи в таблице страниц.
(3)
15) Делаем тест с проверкой работы на элементах массивов, расположенных в стеке и в куче, обозначаем его в Makefile. 
16) проверяем - $ vmprint | $ test

----------------------------
Условие:

<<СП Д/З No8 Страничная адресация памяти
Операционные системы, весна 2024
(1) Создать системный вызов, выводящий на экран таблицу страниц процесса (все три уровня), с указанием того, какие флаги у какой страницы установлены.
(2) Создать системный вызов, который для заданной переменной (передаваемой как указатель и размер, в т.ч. это может быть массив) определяет, был ли доступ к физическим страницам (атрибут А), хранящим данную переменную, а также обнуляющий атрибут А у соответствующих страниц. Т.о. системный вызов должен показывать, был ли доступ к данным в памяти с момента последней проверки этим системным вызовом.
(3) Протестировать работу на элементах массивов, расположенных в стеке и в куче.
Информация по теме: https://pdos.csail.mit.edu/6.1810/2023/labs/pgtbl.html

-------

xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern RISC-V multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)).  See also https://pdos.csail.mit.edu/6.1810/, which provides
pointers to on-line resources for v6.

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by
Takahiro Aoyagi, Marcelo Arroyo, Silas Boyd-Wickizer, Anton Burtsev,
carlclone, Ian Chen, Dan Cross, Cody Cutler, Mike CAT, Tej Chajed,
Asami Doi,Wenyang Duan, eyalz800, Nelson Elhage, Saar Ettinger, Alice
Ferrazzi, Nathaniel Filardo, flespark, Peter Froehlich, Yakir Goaron,
Shivam Handa, Matt Harvey, Bryan Henry, jaichenhengjie, Jim Huang,
Matúš Jókay, John Jolly, Alexander Kapshuk, Anders Kaseorg, kehao95,
Wolfgang Keller, Jungwoo Kim, Jonathan Kimmitt, Eddie Kohler, Vadim
Kolontsov, Austin Liew, l0stman, Pavan Maddamsetti, Imbar Marinescu,
Yandong Mao, Matan Shabtay, Hitoshi Mitake, Carmi Merimovich, Mark
Morrissey, mtasm, Joel Nider, Hayato Ohhashi, OptimisticSide,
phosphagos, Harry Porter, Greg Price, RayAndrew, Jude Rich, segfault,
Ayan Shafqat, Eldar Sehayek, Yongming Shen, Fumiya Shigemitsu, snoire,
Taojie, Cam Tenny, tyfkda, Warren Toomey, Stephen Tu, Alissa Tung,
Rafael Ubal, Amane Uehara, Pablo Ventura, Xi Wang, WaheedHafez,
Keiichi Watanabe, Lucas Wolf, Nicolas Wolovick, wxdao, Grant Wu, x653,
Jindong Zhang, Icenowy Zheng, ZhUyU1997, and Zou Chang Wei.

ERROR REPORTS

Please send errors and suggestions to Frans Kaashoek and Robert Morris
(kaashoek,rtm@mit.edu).  The main purpose of xv6 is as a teaching
operating system for MIT's 6.1810, so we are more interested in
simplifications and clarifications than new features.

BUILDING AND RUNNING XV6

You will need a RISC-V "newlib" tool chain from
https://github.com/riscv/riscv-gnu-toolchain, and qemu compiled for
riscv64-softmmu.  Once they are installed, and in your shell
search path, you can run "make qemu".
